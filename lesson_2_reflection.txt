What happens when you initialize a repository? Why do you need to do it?

When a new repository is initialized git creates a hidden folder named .git which contains all the meta-data that will be used to track the files history,
commits and all data required by Git to track changes in the directory. If you don't initialize the repository you won't be able to keep the version control 
of the files contained in the directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory and the respository as it is a "connection" between them. The value that the staging area offers is
that you can control which files (and changes) to commit and in a given case it allows you to prepare the updates from the working directory files to the actual 
repository version tracking. 

How can you use the staging area to make sure you have one commit per logical
change?

You can use it to organize which files to commit, this feature allows you to control that on a single commit only the changes that make up a logical changed are
part of a commit. You could preform several updates to files but the staging area will allow you to commit logical changes one at a time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are useful when doing experimental versions of files, but also when you have multiple projects on a specific code. For example you have your main
production branch which contains the version running on production, and then have branches that contain changes associated with projects that might in the
future be part of the new production code (by merging the branch into master).

How do the diagrams help you visualize the branch structure?

They help because having a graphical representation of the commits done per branch makes it simple to understand which features or functionalities will be
included on each branch and how are all my branches composed.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result is a new branch/commit that includes all the changes of the two branches selected in the merge operation. This allows to combine modifications from
multiple features, projects, etc. into a single version. We represent it that way to make it easy to see the commits that were done and how are the combined
in the commit created by the merge.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Pros of automatic merging: saves time, makes easier this task. Cons: Git doesn't know how to handle conflicts automatically.