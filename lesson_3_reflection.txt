When would you want to use a remote repository rather than keeping all your work local?

I would use a remot repository if I want my project to be available for other people to contribute or if for example I want to access my work from a computer different from the one I regulary use. For projects I would use it to share software created by me free for everyone, if this was a private project I would still use a remote repository but not a public one though.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

There might be a case in which you made software public for people to collaborate but you don't really want to download every change as it could modify your current files. It might be a good idea for you to first check the commits that will be pulled before doing so.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

The difference is that forks work on GitHub servers, you can create copies of another user repository without actually downloading to your local computer, clones are copies from repositories at GitHub using Git, so you can work with those files locally and finally branches work on repositories (either at Git or GitHub) allowing to create a copy of the current versions of the branch you use as root so you can create work in parallel from a single starting point.

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit is that you can find faster were the remote and local repositories diverged using as a starting point of comparisson the remote latest commit.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If I didn't have any version control software I would probably collaborate having individual copies of the source code and then merging all the changes done by each person, begining to work would be easier because you wouldn't need to learn how to use Git or any additional software however merging changes and keeping track of specific working versions would be really hard.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I'd do changes in a separate branch when those changes will modify the source code in such a way that either the new feature is included or the changes are experimental and could break a production version. When I'm doing simple modifications on the working version I'd do them directly into master, for example solving an indicent or bug. The benefit of branching is that you can make any change you want and still having isloated from the production version thus reducing risks of malfunctioning code and fixing bugs or incidents directly into master is good to keep master up to date with the actual working version and people can merge the latest changes into their branches from master to work on a (hopefully) bug free version, ensuring that their branch work will include the fixes.
